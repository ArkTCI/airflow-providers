name: Publish FileMaker Provider to PyPI

on:
  push:
    paths:
      - 'filemaker/**'
      - '.github/workflows/publish-filemaker-to-pypi.yml'
  pull_request:
    paths:
      - 'filemaker/**'
      - '.github/workflows/publish-filemaker-to-pypi.yml'
  release:
    types: [created]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      bump_type:
        description: 'Type of version bump to perform'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  quality:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: filemaker
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Debug environment
      run: |
        pwd
        ls -la
        find . -type d -maxdepth 3
        python -c "import sys; print(sys.path)"
        ls -la src/airflow/providers/filemaker/hooks/ || echo "Hooks directory not found"
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('filemaker/requirements.txt', 'filemaker/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
        
    - name: Verify version consistency
      run: |
        echo "Verifying that version is defined in a single source..."
        VERSION=$(python -c "from airflow.providers.filemaker.version import __version__; print(__version__)")
        echo "Version from version.py: $VERSION"
        
        # Check that setup.py correctly reads the version
        SETUP_VERSION=$(python -c "import re; content = open('setup.py').read(); print(re.search(r'version=VERSION', content) is not None)")
        if [ "$SETUP_VERSION" != "True" ]; then
          echo "Error: setup.py does not use the VERSION variable from version.py"
          exit 1
        fi
        
        # Check that __init__.py imports the version
        INIT_VERSION=$(python -c "import re; content = open('src/airflow/providers/filemaker/__init__.py').read(); print(re.search(r'from airflow.providers.filemaker.version import __version__', content) is not None)")
        if [ "$INIT_VERSION" != "True" ]; then
          echo "Error: __init__.py does not import __version__ from version.py"
          exit 1
        fi
        
        echo "Version consistency verified!"
        
    - name: Lint with flake8
      run: |
        # Critical errors only
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Use project config for the rest
        flake8 src/ --count --exit-zero --statistics
        
    - name: Lint with pylint
      run: |
        pylint --disable=C,R,W src/ || true  # Don't fail on warnings
        
    - name: Auto-format with black
      run: |
        # Uses pyproject.toml configuration
        black src/
        
    - name: Auto-format imports with isort
      run: |
        # Uses pyproject.toml configuration
        isort src/
        
    - name: Commit formatting changes
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "Apply code formatting [skip ci]"
        file_pattern: filemaker/src/**/*.py
        
  test:
    runs-on: ubuntu-latest
    needs: quality
    defaults:
      run:
        working-directory: filemaker
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      id: cache-pip-test
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('filemaker/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
        
    - name: Setup Airflow structure for tests
      run: |
        # Create a minimal airflow structure for tests
        mkdir -p airflow/providers
        ln -s $(pwd)/src/airflow/providers/filemaker airflow/providers/
        export PYTHONPATH=$PYTHONPATH:$(pwd):$(pwd)/src
        echo "PYTHONPATH=$PYTHONPATH"
        ls -la airflow/providers/
        
    - name: Run unit tests
      run: |
        # Add the src directory to the Python path
        export PYTHONPATH=$PYTHONPATH:$(pwd):$(pwd)/src
        python -m pytest tests/unit --cov=src --cov-report=xml -v

    - name: Run integration tests
      if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'release' }}
      env:
        FILEMAKER_HOST: ${{ secrets.FILEMAKER_HOST }}
        FILEMAKER_DATABASE: ${{ secrets.FILEMAKER_DATABASE }}
        FILEMAKER_USERNAME: ${{ secrets.FILEMAKER_USERNAME }}
        FILEMAKER_PASSWORD: ${{ secrets.FILEMAKER_PASSWORD }}
        PYTHONPATH: ${{ env.PYTHONPATH }}:$(pwd):$(pwd)/src
      run: |
        # Only run if all required secrets are available
        if [[ -n "$FILEMAKER_HOST" && -n "$FILEMAKER_DATABASE" && -n "$FILEMAKER_USERNAME" && -n "$FILEMAKER_PASSWORD" ]]; then
          # Add the src directory to the Python path
          export PYTHONPATH=$PYTHONPATH:$(pwd):$(pwd)/src
          python -m pytest tests/integration --cov=src --cov-append --cov-report=xml -v
          echo "Integration tests completed successfully"
        else
          echo "Skipping integration tests - one or more credentials are missing"
          echo "Integration tests will only run if all credentials are provided as GitHub secrets"
        fi
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        
  deploy:
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: filemaker
    permissions:
      contents: write  # Need write permissions to create version bumps and tags
      id-token: write  # IMPORTANT: this permission is required for trusted publishing
      
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Required for bump2version to work with tags
    
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      id: cache-pip-deploy
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-deploy-${{ hashFiles('filemaker/requirements.txt', 'filemaker/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-deploy-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine wheel bump2version
        
    - name: Extract current version for logging
      run: |
        echo "Current version: $(python -c "from airflow.providers.filemaker.version import __version__; print(__version__)")"
        
    - name: Bump version
      if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
      run: |
        # Default to patch release
        PART="patch"
        
        # If workflow_dispatch, use the specified bump type
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          PART="${{ github.event.inputs.bump_type }}"
          echo "Using manually specified bump type: $PART"
        # If release, derive the bump type from the release tag (vX.Y.Z)
        elif [ "${{ github.event_name }}" == "release" ]; then
          # Extract version from release tag
          TAG_NAME="${{ github.event.release.tag_name }}"
          if [[ $TAG_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Extract just the numbers without the 'v' prefix
            TAG_VERSION=${TAG_NAME:1}
            # Get current version
            CURRENT_VERSION=$(python -c "from airflow.providers.filemaker.version import __version__; print(__version__)")
            
            # Compare the versions to determine what part was changed
            IFS='.' read -r CURRENT_MAJOR CURRENT_MINOR CURRENT_PATCH <<< "$CURRENT_VERSION"
            IFS='.' read -r TAG_MAJOR TAG_MINOR TAG_PATCH <<< "$TAG_VERSION"
            
            if [ "$TAG_MAJOR" -gt "$CURRENT_MAJOR" ]; then
              PART="major"
            elif [ "$TAG_MINOR" -gt "$CURRENT_MINOR" ]; then
              PART="minor"
            else
              PART="patch"
            fi
            
            echo "Derived bump type from release tag ($TAG_NAME): $PART"
          else
            echo "Release tag format not recognized. Using default bump type: $PART"
          fi
        fi
        
        # Perform the version bump
        bump2version $PART --verbose
        
        # Display the new version
        NEW_VERSION=$(python -c "from airflow.providers.filemaker.version import __version__; print(__version__)")
        echo "Version bumped to: $NEW_VERSION"
        
        # Push the version update and tags
        git push
        git push --tags
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check distribution
      run: |
        python -m twine check dist/*
        
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: filemaker/dist/
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true
        verbose: true 